generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  firstName           String
  lastName            String
  email               String    @unique
  password            String
  role                Role      @default(USER)
  verificationCode    String?
  codeExpiry          DateTime?
  isVerified          Boolean   @default(false)
  resetPasswordCode   String?
  resetPasswordExpiry DateTime?

  totpSecret  String?
  totpEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LoginHistory    LoginHistory[]
  BlogPost        BlogPost[]
  Question        Question[]
  Answer          Answer[]
  QuestionComment QuestionComment[]
  AnswerComment   AnswerComment[]
  QuestionVote    QuestionVote[]
  AnswerVote      AnswerVote[]
}

enum Role {
  USER
  ADMIN
}

model LoginHistory {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  device     String?
  location   String?
  loginTime  DateTime @default(now())
  successful Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model BlogCategory {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?

  posts BlogPost[] @relation("BlogPostCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([slug])
}

model BlogPost {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(255)
  slug        String     @unique
  content     String     @db.Text
  excerpt     String?    @db.VarChar(300)
  thumbnail   String?
  status      BlogStatus @default(DRAFT)
  readTime    Decimal?
  publishedAt DateTime?
  userId      String

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories BlogCategory[] @relation("BlogPostCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([userId])
  @@index([status])
  @@index([publishedAt])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

model Question {
  id               String         @id @default(cuid())
  title            String         @db.VarChar(255)
  content          String         @db.Text
  userId           String
  status           QuestionStatus @default(OPEN)
  acceptedAnswerId String?

  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers  Answer[]
  tags     Tag[]             @relation("QuestionTags")
  votes    QuestionVote[]
  comments QuestionComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([title])
  @@index([status])
  @@index([createdAt])
}

enum QuestionStatus {
  OPEN
  CLOSED
}

model Answer {
  id         String  @id @default(cuid())
  content    String  @db.Text
  userId     String
  questionId String
  isAccepted Boolean @default(false)

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes    AnswerVote[]
  comments AnswerComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([questionId])
}

model QuestionComment {
  id         String @id @default(cuid())
  content    String @db.Text
  userId     String
  questionId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AnswerComment {
  id       String @id @default(cuid())
  content  String @db.Text
  userId   String
  answerId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[] @relation("QuestionTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionVote {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  type       VoteType

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, questionId])
}

model AnswerVote {
  id       String   @id @default(cuid())
  userId   String
  answerId String
  type     VoteType

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, answerId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
