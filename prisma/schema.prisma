generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  firstName           String
  lastName            String
  email               String    @unique
  password            String
  role                Role      @default(USER)
  verificationCode    String?
  codeExpiry          DateTime?
  isVerified          Boolean   @default(false)
  resetPasswordCode   String?
  resetPasswordExpiry DateTime?

  totpSecret  String?
  totpEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LoginHistory LoginHistory[]
  BlogPost     BlogPost[]
  Question     Question[]
  Answer       Answer[]
  AnswerVote   AnswerVote[]
  Listing      Listing[]
  GigService   GigService[]
  Board        Board[]
  Task         Task[]
}

enum Role {
  USER
  ADMIN
}

model LoginHistory {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String?
  userAgent  String?
  device     String?
  location   String?
  loginTime  DateTime @default(now())
  successful Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model BlogCategory {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?

  posts BlogPost[] @relation("BlogPostCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([slug])
}

model BlogPost {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(255)
  slug        String     @unique
  content     String     @db.Text
  excerpt     String?    @db.VarChar(300)
  thumbnail   String?
  status      BlogStatus @default(DRAFT)
  readTime    Decimal?
  publishedAt DateTime?
  userId      String

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories BlogCategory[] @relation("BlogPostCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([userId])
  @@index([status])
  @@index([publishedAt])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

model Question {
  id               String         @id @default(cuid())
  title            String         @db.VarChar(255)
  content          String         @db.Text
  userId           String
  status           QuestionStatus @default(OPEN)
  acceptedAnswerId String?
  slug             String         @unique

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]
  tags    Tag[]    @relation("QuestionTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([title])
  @@index([status])
  @@index([createdAt])
  @@index([slug])
}

enum QuestionStatus {
  OPEN
  CLOSED
}

model Answer {
  id         String  @id @default(cuid())
  content    String  @db.Text
  userId     String
  questionId String
  isAccepted Boolean @default(false)
  upvotes    Int     @default(0)
  downvotes  Int     @default(0)

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes    AnswerVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([questionId])
  @@index([isAccepted])
  @@index([upvotes])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[] @relation("QuestionTags")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  TaskTag   TaskTag[]
}

model AnswerVote {
  id       String   @id @default(cuid())
  userId   String
  answerId String
  type     VoteType

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, answerId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Listing {
  id          String          @id @default(cuid())
  title       String
  description String
  price       Float?
  condition   Condition
  category    ListingCategory
  images      String[]
  isAvailable Boolean         @default(true)
  userId      String

  isRentable   Boolean @default(false)
  rentalPeriod Int?

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isAvailable])
  @@index([isRentable])
  @@index([createdAt])
  @@index([price])
  @@index([category])
  @@index([condition])
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum ListingCategory {
  ELECTRONICS
  CLOTHING
  BOOKS
  COURSE_MATERIALS
  MUSICAL_INSTRUMENTS
  SPORTS_EQUIPMENT
  TOOLS
  OTHER
}

model GigService {
  id          String           @id @default(cuid())
  title       String
  description String
  price       Float?
  category    GigCategory
  direction   ServiceDirection @default(OFFERING)
  userId      String

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([direction])
  @@index([createdAt])
  @@index([price])
  @@index([category])
}

enum ServiceDirection {
  OFFERING
  REQUESTING
}

enum GigCategory {
  TUTORING
  NOTES_SHARING
  ACADEMIC_WRITING
  DESIGN_SERVICES
  CODING_HELP
  LANGUAGE_TRANSLATION
  EVENT_PLANNING
  PHOTOGRAPHY
  MUSIC_LESSONS
  RESEARCH_ASSISTANCE
  EXAM_PREP
  RESUME_WRITING
  CAMPUS_DELIVERY
  TECHNICAL_REPAIR
  OTHER
}

model Board {
  id     String @id @default(uuid())
  title  String
  userId String

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns Column[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Column {
  id        String  @id @default(uuid())
  title     String
  order     Int     @default(0)
  isDefault Boolean @default(false)
  boardId   String

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
  @@index([order])
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  priority    TaskPriority
  dueDate     DateTime?
  columnId    String
  userId      String

  column   Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id])
  taskTags TaskTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([columnId])
  @@index([userId])
  @@index([priority])
  @@index([dueDate])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model TaskTag {
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
}
